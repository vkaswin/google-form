{"version":3,"file":"static/js/layouts-FormLayout.b2f61c64.chunk.js","mappings":"gNAQIA,EAAmBC,OAAOC,aAEjBC,EAAa,SAAH,GAGC,IAFtBC,EAAU,EAAVA,WACAC,EAAe,EAAfA,gBAEMC,EAAe,SAACC,GACpBC,QAAQC,IAAIF,EACd,EAEA,OACE,UAAC,EAAAG,YAAW,CACVC,UAAU,EACVC,WAAYR,IAAeJ,EAC3Ba,QAAS,kBAAMR,EAAgBL,EAAS,EAAC,WAEzC,SAAC,EAAAc,WAAU,CAACC,GAAG,KAAKC,YAAY,aAAaC,QAASX,KACtD,SAAC,EAAAQ,WAAU,CAACE,YAAY,mBAAmBC,QAASX,MAG1D,C,+GC6EA,UA3FmB,WACjB,IAAQY,GAAWC,EAAAA,EAAAA,MAAXD,OAIR,IAFiBE,EAAAA,EAAAA,WAATC,MAE0BC,EAAAA,EAAAA,UAAqB,CACrDC,MAAO,OACPC,YAAa,eACbC,MAAO,cACPC,OAAQ,CACN,CACEC,GAAI1B,OAAOC,aACX0B,SAAU,eACVC,KAAM,OACNC,MAAO,eACPC,WAAY,CACVC,MAAO,CAAEC,UAAU,KAGvB,CACEN,GAAI1B,OAAOC,aACX0B,SAAU,SACVC,KAAM,QACNC,MAAO,OACPC,WAAY,CACVC,MAAO,CAAEC,UAAU,IAErBC,QAAS,CAAC,CAAEJ,MAAO,QAAU,CAAEA,MAAO,WACtCK,MAAO,aAGX,eA1BGC,EAAU,KAAEC,EAAa,KA4B9B,GAAkCf,EAAAA,EAAAA,UAAwB,MAAK,eAA1DlB,EAAU,KAAEkC,EAAa,KAExBjC,EAAkB,SAACsB,GACvBW,EAAcX,EAChB,GA+BAY,EAAAA,EAAAA,YAAU,WACR,GACC,CAACrB,IAEJ,IAIMsB,EAA2B,CAC/BJ,WAAAA,EACAhC,WAAAA,EACAC,gBAAAA,EACAC,aAzCmB,SACnBmC,EACAd,EACAE,GAEA,IAAIa,GAAI,UAAQN,GAEhB,OAAQK,GACN,IAAK,cAEL,IAAK,WAEL,IAAK,UASL,IAAK,QACH,MARF,IAAK,OACH,IAAIE,EAAQD,EAAKhB,OAAOkB,MAAK,SAACD,GAC5B,OAAOA,EAAMhB,KAAOA,CACtB,IACA,IAAKgB,EAAO,OACZA,EAAMd,KAAOA,EACb,MAGF,QACE,OAEJQ,EAAcK,EAChB,GAiBA,OACE,iBAAKG,UAAWC,EAAAA,QAAAA,UAAiB,WAC/B,SAAC,EAAA3C,WAAU,CAACC,WAAYA,EAAYC,gBAAiBA,KACrD,SAAC,KAAM,CAACmC,QAASA,MAGvB,C,6BCtGA,WAAgB,UAAY,8B","sources":["layouts/FormLayout/FormHeader/index.tsx","layouts/FormLayout/index.tsx","webpack://react-google-form/./src/layouts/FormLayout/FormLayout.module.scss?0984"],"sourcesContent":["import { ChangeEvent } from \"react\";\nimport { TextEditor, FormWrapper } from \"components\";\n\nexport type FormHeaderProps = {\n  selectedId: string | null;\n  handleClickForm: (id: string) => void;\n};\n\nlet headerId: string = crypto.randomUUID();\n\nexport const FormHeader = ({\n  selectedId,\n  handleClickForm,\n}: FormHeaderProps) => {\n  const handleChange = (event: ChangeEvent<HTMLDivElement>) => {\n    console.log(event);\n  };\n\n  return (\n    <FormWrapper\n      isHeader={true}\n      isSelected={selectedId === headerId}\n      onClick={() => handleClickForm(headerId)}\n    >\n      <TextEditor as=\"h1\" placeholder=\"Form title\" onInput={handleChange} />\n      <TextEditor placeholder=\"Form description\" onInput={handleChange} />\n    </FormWrapper>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { Outlet, useParams } from \"react-router-dom\";\nimport {\n  FormParams,\n  FormDetail,\n  FormContextType,\n  FormType,\n  FormField,\n} from \"types/Form\";\nimport { FormHeader } from \"./FormHeader\";\nimport { useAuth } from \"hooks/useAuth\";\n\nimport styles from \"./FormLayout.module.scss\";\n\nconst FormLayout = () => {\n  const { formId } = useParams<FormParams>();\n\n  const { user } = useAuth();\n\n  let [formDetail, setFormDetail] = useState<FormDetail>({\n    theme: \"dark\",\n    description: \"Loreum Ispum\",\n    title: \"Google Form\",\n    fields: [\n      {\n        id: crypto.randomUUID(),\n        question: \"Loreum Ipsum\",\n        type: \"date\",\n        value: \"Loreum Ispum\",\n        validation: {\n          rules: { required: true },\n        },\n      },\n      {\n        id: crypto.randomUUID(),\n        question: \"Gender\",\n        type: \"radio\",\n        value: \"Male\",\n        validation: {\n          rules: { required: true },\n        },\n        options: [{ value: \"Male\" }, { value: \"Female\" }],\n        other: \"Other\",\n      },\n    ],\n  });\n\n  let [selectedId, setSelectedId] = useState<string | null>(null);\n\n  const handleClickForm = (id: string) => {\n    setSelectedId(id);\n  };\n\n  const handleChange = (\n    key: Exclude<keyof FormField, \"id\" | \"validation\">,\n    id: string,\n    type: FormType\n  ): void => {\n    let form = { ...formDetail };\n\n    switch (key) {\n      case \"description\":\n        break;\n      case \"question\":\n        break;\n      case \"options\":\n        break;\n      case \"type\":\n        let field = form.fields.find((field) => {\n          return field.id === id;\n        });\n        if (!field) return;\n        field.type = type;\n        break;\n      case \"value\":\n        break;\n      default:\n        return;\n    }\n    setFormDetail(form);\n  };\n\n  useEffect(() => {\n    // getFormDetails();\n  }, [formId]);\n\n  const getFormDetails = (): void => {\n    console.log(\"form details\", formId);\n  };\n\n  const context: FormContextType = {\n    formDetail,\n    selectedId,\n    handleClickForm,\n    handleChange,\n  };\n\n  return (\n    <div className={styles.container}>\n      <FormHeader selectedId={selectedId} handleClickForm={handleClickForm} />\n      <Outlet context={context} />\n    </div>\n  );\n};\n\nexport default FormLayout;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FormLayout_container__-VSpI\"};"],"names":["headerId","crypto","randomUUID","FormHeader","selectedId","handleClickForm","handleChange","event","console","log","FormWrapper","isHeader","isSelected","onClick","TextEditor","as","placeholder","onInput","formId","useParams","useAuth","user","useState","theme","description","title","fields","id","question","type","value","validation","rules","required","options","other","formDetail","setFormDetail","setSelectedId","useEffect","context","key","form","field","find","className","styles"],"sourceRoot":""}