{"version":3,"file":"static/js/components-Form-FormCard-TypeDropDown.ccaaf754.chunk.js","mappings":"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","sources":["components/DropDown/index.tsx","components/Form/FormCard/TypeDropDown/index.tsx","helpers/index.tsx","webpack://react-google-form/./src/components/DropDown/DropDown.module.scss?3f20","webpack://react-google-form/./src/components/Form/FormCard/TypeDropDown/TypeDropDown.module.scss?767d"],"sourcesContent":["import {\n  ReactNode,\n  useEffect,\n  useState,\n  createContext,\n  useContext,\n  ComponentProps,\n  MouseEvent,\n} from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { createPortal } from \"react-dom\";\nimport { usePopper } from \"react-popper\";\nimport { clickOutside } from \"helpers\";\n\nimport styles from \"./DropDown.module.scss\";\n\ntype DropDownProps = {\n  selector: string;\n  children?: ReactNode;\n  size?: \"auto\" | null;\n} & ComponentProps<\"div\">;\n\ntype DropDownContextType = {\n  close: () => void;\n};\n\nconst DropDownContext = createContext<DropDownContextType | null>(null);\n\nexport const DropDown = ({\n  className,\n  selector,\n  children,\n  size = null,\n  ...props\n}: DropDownProps) => {\n  let [referenceElement, setReferenceElement] = useState<HTMLElement | null>(\n    null\n  );\n  let [popperElement, setPopperElement] = useState<HTMLElement | null>(null);\n\n  const {\n    attributes,\n    styles: style,\n    state,\n  } = usePopper(referenceElement, popperElement, {\n    placement: \"bottom-start\",\n    modifiers: [\n      {\n        name: \"offset\",\n        options: {\n          offset: [0, 10],\n        },\n      },\n    ],\n  });\n\n  const [show, setShow] = useState(false);\n\n  const open = () => {\n    setShow(true);\n  };\n\n  const close = () => {\n    setShow(false);\n  };\n\n  useEffect(() => {\n    if (selector.length === 0) return;\n\n    const element = document.querySelector(selector) as HTMLElement;\n\n    if (!element) return;\n\n    element.onclick = open;\n\n    setReferenceElement(element);\n  }, []);\n\n  const onEntered = (element: HTMLElement) => {\n    if (!element) return;\n\n    clickOutside({\n      ref: element,\n      onClose: close,\n      doNotClose: (event) => {\n        if (!referenceElement) return false;\n        return referenceElement.contains(event);\n      },\n    });\n  };\n\n  return createPortal(\n    <CSSTransition\n      in={show}\n      timeout={200}\n      unmountOnExit\n      classNames={{\n        enterActive: styles.enter,\n        exitActive: styles.exit,\n      }}\n      onEntered={onEntered}\n    >\n      <DropDownContext.Provider value={{ close: close }}>\n        <div\n          ref={setPopperElement}\n          className={`${styles.container} ${className || \"\"}`.trim()}\n          style={{\n            ...style.popper,\n            ...(size === \"auto\" && { width: state?.rects?.reference?.width }),\n          }}\n          {...attributes.popper}\n          {...props}\n        >\n          <div className={styles.menu}>{children}</div>\n        </div>\n      </DropDownContext.Provider>\n    </CSSTransition>,\n    document.body\n  );\n};\n\ntype DropDownItemProps = {\n  children?: ReactNode;\n  onClick?: (event: MouseEvent) => void;\n  className?: string;\n} & ComponentProps<\"button\">;\n\nexport const Item = ({\n  children,\n  onClick,\n  className,\n  ...props\n}: DropDownItemProps) => {\n  const { close } = useContext(DropDownContext) as DropDownContextType;\n\n  const handleClick = (event: MouseEvent): void => {\n    close();\n    if (typeof onClick === \"function\") onClick(event);\n  };\n\n  return (\n    <button\n      className={`${styles.item} ${className ? className : \"\"}`.trim()}\n      onClick={handleClick}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n\nDropDown.Item = Item;\n","import { Fragment } from \"react\";\nimport { DropDown } from \"components/DropDown\";\nimport { FormContextType, FormIndexes, FormTypeOption } from \"types/Form\";\n\nimport styles from \"./TypeDropDown.module.scss\";\n\ntype OptionsProps = {\n  id: string;\n  options: FormTypeOption[];\n  selectedOption: FormTypeOption | undefined;\n  handleFormType: FormContextType[\"handleFormType\"];\n} & FormIndexes;\n\nexport const TypeDropDown = ({\n  id,\n  options,\n  selectedOption,\n  fieldindex,\n  sectionindex,\n  handleFormType,\n}: OptionsProps) => {\n  return (\n    <Fragment>\n      <div id={`option-${id}`} className={styles.wrapper}>\n        <div className={styles.option}>\n          <i className={selectedOption?.icon}></i>\n          <span>{selectedOption?.label}</span>\n        </div>\n        <i className=\"bxs-down-arrow\"></i>\n      </div>\n      <DropDown selector={`#option-${id}`} size=\"auto\">\n        {options.map((option) => {\n          return (\n            <DropDown.Item\n              key={`${option.label}-${id}`}\n              onClick={() =>\n                handleFormType(sectionindex, fieldindex, option.type)\n              }\n            >\n              <i className={option.icon}></i>\n              <span>{option.label}</span>\n            </DropDown.Item>\n          );\n        })}\n      </DropDown>\n    </Fragment>\n  );\n};\n","import { ReactNode } from \"react\";\n\ntype CookieSetter<T> = {\n  name: string;\n  value: T;\n  days: number;\n};\n\nexport const cookies = () => {\n  const set = <T,>({ name, value, days }: CookieSetter<T>): void => {\n    let expireDate = new Date();\n    expireDate.setTime(expireDate.getTime() + days * 24 * 60 * 60 * 1000);\n    let expires = \"; expires=\" + expireDate.toUTCString();\n    document.cookie = name + \"=\" + JSON.stringify(value) + expires + \"; path=/\";\n  };\n\n  const get = (name: string): string | null => {\n    let match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n\n    return match ? match[2] : null;\n  };\n\n  const remove = (name: string): void => {\n    document.cookie =\n      name + \"=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\n  };\n\n  return {\n    set,\n    get,\n    remove,\n  };\n};\n\nexport const clickOutside = ({\n  ref,\n  onClose,\n  doNotClose = () => false,\n}: {\n  ref: HTMLElement;\n  onClose: () => void;\n  doNotClose?: (element: HTMLElement) => boolean;\n}) => {\n  if (!ref) return;\n\n  const handleClickOutside = (event: MouseEvent) => {\n    let { target } = event;\n    if (\n      ref.contains(target as HTMLElement) ||\n      doNotClose(target as HTMLElement)\n    )\n      return;\n    onClose();\n    document.removeEventListener(\"click\", handleClickOutside);\n  };\n\n  document.addEventListener(\"click\", handleClickOutside);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"enter\":\"DropDown_enter__uSEE3\",\"menu\":\"DropDown_menu__3cGdI\",\"exit\":\"DropDown_exit__8wUc0\",\"left\":\"DropDown_left__GqnVO\",\"right\":\"DropDown_right__58P-d\",\"top\":\"DropDown_top__9AW9N\",\"bottom\":\"DropDown_bottom__iuD9Z\",\"container\":\"DropDown_container__uTfyj\",\"item\":\"DropDown_item__TyAwV\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"TypeDropDown_wrapper__clect\",\"option\":\"TypeDropDown_option__qFot5\"};"],"names":["DropDownContext","createContext","DropDown","className","selector","children","size","props","useState","referenceElement","setReferenceElement","popperElement","setPopperElement","usePopper","placement","modifiers","name","options","offset","attributes","style","styles","state","show","setShow","open","close","useEffect","length","element","document","querySelector","onclick","createPortal","in","timeout","unmountOnExit","classNames","enterActive","exitActive","onEntered","clickOutside","ref","onClose","doNotClose","event","contains","Provider","value","trim","popper","width","rects","reference","body","Item","onClick","useContext","TypeDropDown","id","selectedOption","fieldindex","sectionindex","handleFormType","Fragment","icon","label","map","option","type","cookies","set","days","expireDate","Date","setTime","getTime","expires","toUTCString","cookie","JSON","stringify","get","match","RegExp","remove","addEventListener","handleClickOutside","target","removeEventListener"],"sourceRoot":""}